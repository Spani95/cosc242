#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "mylib.h"
#include "flexarray.h"

struct flexarrayrec {
    int capacity;
    int itemcount;
    char **items;
};

flexarray flexarray_new() {
    flexarray result = emalloc(sizeof *result);
    result->capacity = 2;
    result->itemcount = 0;
    result->items = emalloc(result->capacity * sizeof result->items[0]);
    return result;
}

void flexarray_append(flexarray f, char *word) {
    if (f->itemcount == f->capacity) {
        f->capacity += f->capacity;
	f->items = erealloc(f->items, f->capacity * sizeof f->items[0]);
    }
    f->items[f->itemcount] = emalloc((strlen(word)+1) * sizeof f->items[0][0]);
    strcpy(f->items[f->itemcount], word);
    f->itemcount++;
}

void flexarray_print(flexarray f) {
    /* a "for" loop to print out each cell of f->items */
    int i;
    for (i = 0; i < f->itemcount; i++){
        fprintf(stdout, "%s\n", f->items[i]);
    }
}

static void merge(char **array, char **workspace, int len) {
    int mid = len / 2;
    int left = 0;
    int right = mid;
    int i = 0;

    while (left < mid && right < len) {
        if(strcmp(array[left], array[right]) > 0) {
            workspace[i] = emalloc((strlen(array[i])+1)*sizeof workspace[0][0]);
            strcpy(workspace[i], array[right]);
            right++;
        } else {
            workspace[i] = emalloc((strlen(array[i])+1)*sizeof workspace[0][0]);
            strcpy(workspace[i], array[left]);
            left++;
        }
        i++;
    }

    if (right < len) {
        for (i = i; i < len; i++) {
            workspace[i] = emalloc((strlen(array[i])+1)*sizeof workspace[0][0]);
            strcpy(workspace[i], array[right]);
            right++;
        }
    }

    if (left < mid) {
        for (i = i; i < len; i++) {
            workspace[i] = emalloc((strlen(array[i])+1)*sizeof workspace[0][0]);
            strcpy(workspace[i], array[left]);
            left++;
        }
    }
}


static void merge_sort(char **a, char **w, int n) {
    int i;

    if(n < 2) {
        return;
    }

    merge_sort(a, w, n / 2);
    merge_sort((a + (n / 2)), w, (n - (n / 2)));

    merge(a, w, n);

    for (i = 0; i < n; i++) {
        strcpy(a[i], w[i]);
    }
}

void flexarray_sort(flexarray f) {
    char **work_array = emalloc(f->capacity * sizeof f->items[0]);
    merge_sort(f->items, work_array, f->itemcount);
    free(work_array);
}

int search(char **a, int left, int right, char *word){
  int mid = (left + right) / 2;
  if (left == mid - 1 || right == mid + 1){
    if(strcmp(a[mid], word) == 0){
      return 1;
    } else {
      return 0;
    }
  }
  if (strcmp(a[left], word) == 0 || strcmp(a[mid], word) == 0 || strcmp(a[right], word) == 0){
    return 1;
  } else if (strcmp(word, a[mid]) < 0) {
    return search(a, left, mid, word);
  } else {
    return search(a, mid, right, word);
  }
}

int flexarray_isPresent(flexarray f, char *word) {
  return search(f->items,0, (f->itemcount - 1), word );
}

void flexarray_visted(flexarray f, void b(char *word)){
  int i;
  for (i = 0; i < f->itemcount; i++) {
    b(f->items[i]);
  }
}

void print_key(char *word){
  printf("%s\n", word);
}

void flexarray_free(flexarray f) {
    /* free the memory associated with the flexarray */
    free(f);
}
